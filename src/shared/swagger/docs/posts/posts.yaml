/post/create:
  post:
    security:
      - Bearer: []
    tags:
      - Post
    summary: Create new post
    description: Return new post data
    requestBody:
      description: Post
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePostModel'
          example:
            title: 'Programming'
            content: 'I love programming, especially TypeScript and JavaScript'
    responses:
      200:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                title:
                  type: string
                content:
                  type: string
                author:
                  type: object
                  properties:
                    id:
                      type: string
      422:
        description: Unprocessable Entity
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  enum:
                    - "Validation failed"
/post/list:
  get:
    security:
      - Bearer: []
    tags:
      - Post
    summary: Get posts with pagination
    parameters:
      - in: query
        name: offset
        schema:
          type: integer
        description: The number of items to skip before starting to collect the posts result
      - in: query
        name: limit
        schema:
          type: integer
        description: The number of posts to return
    responses:
      200:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                total:
                  type: number
                page:
                  type: number
                nextPage:
                  type: number
                prevPage:
                  type: number
                hasNextPage:
                  type: boolean
                hasPrevPage:
                  type: boolean
                limit:
                  type: number
                offset:
                  type: number
                totalPages:
                  type: number
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      content:
                        type: string
                      author:
                        type: object
                        properties:
                          id:
                            type: 'number'
/post/{id}:
  post:
    tags:
      - Post
    summary: Get post by id
    parameters:
      - in: path
        name: id
        schema:
          type: string
          required: true
          description: Post id to get it
    responses:
      200:
        description: OK
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PostModel'
      404:
        description: Not found
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  enum:
                    - Post Not found
      401:
        description: Unauthorized
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  enum:
                    - Unauthorized, please create your account to leave a post




